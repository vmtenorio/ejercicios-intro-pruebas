NumZero


1.
Está mal porque el bucle empieza en 1 en lugar de en 0, por lo que se salta el primer elemento del array.

2.
Para que no ejecute el código del fallo deberíamos hacer que no entre en el método de contar 0s, lo cual es imposible. En cuanto entra a ese método y su bucle, ya ejecuta el código con el fallo.

3.
No es posible que no haya error en el estado, pues al empezar en 1 el contador, el estado ya en ese momento es erróneo, y esto no es recuperable.

4.
int arr[] = {2, 7, 0};
Este caso no provoca el fallo, pues no tiene un 0 en el primer elemento, pero si provoca un error en el estado, pues este es erróneo siempre que entra en el bucle.

5.
El primer estado erróneo es cuando la variable de control del bucle (i) vale 1 y no 0, como debería valer. El resto (contador de programa, etc) está bien, pues en el estado correcto estaría en la misma instrucción el PC y el resto de variables tendrían el mismo valor.

6.
java -cp .:../junit-4.12.jar:../hamcrest-core-1.3.jar AllTests
..
Time: 0.009

OK (2 tests)

Simplemente cambiando el 1 del inicio del bucle por un 0: for (int i = 0; i < x.length; i++).



CountPositive

1.
El fault es que tenemos que cuente si x es mayor o igual a 0, cuando si es igual a 0 no debería contarlo como positivo. Habría que cambiar el >= por un >.

2.
En cuanto entra al método de contar positivos va a ejecutar el código que tiene el fallo (la sentencia del >=), por lo que es imposible que no ejecute esa parte del código

3.
En cuanto encuetra un 0, la variable count va a estar mal, pues va a contar uno más de los que verdaderamente hay. Por lo tanto, si no hay 0s, va a ejecutar la parte incorrecta, pero no va a influir en el estado del programa, pues count va a tener el valor correcto.

4.
Aquí es imposible provocar fallo sin influir en el estado del programa, pues si no hay 0s el programa funciona bien, pero si hay alguno va a funcionar mal y el estado será incorrecto.

5.
El primer estado erróneo es cuando aparece el primer 0, y count pasa a valer 1 más de lo que debería.

6.
va -cp .:../junit-4.12.jar:../hamcrest-core-1.3.jar AllTests
.
Time: 0.01

OK (1 test)
Simplemente cambiando el >= Por un >
if (x[i] > 0)


FindLast

1.
El fallo está en que el bucle debería acabar en 0, pero acaba en 1, por lo que el primer elemento no lo comprueba.

2.
La condición del bucle siempre se va a ejecutar, que es donde está el fallo, pero puedes provocar que no importe porque no tenga que llegar a comprobar el valor 0, pues retorne antes, si encuentra el valor deseado antes de llegar al primero.
int arr[] = {2, 3, 5};
int y = 3;
Aquí va a encontrar el 3 en la posición 1, y va a salir antes de llegar al 0. Aún así la sentencia que está mal siempre se va a ejecutar, aunque sin llegar a provocar el fallo.

3.
No es posible que ejecute el fallo (failure) y no provoque error en el estado, pues si llega a la primera posición (más bien si no llega), el estado no será el correcto, pues debería ser la variable de control del bucle 0 y el PC estar dentro del bucle.

4.
Esto es posible si el primer elemento no es el valor deseado. El error en el estado se va a provocar, pues va a llegar al primer elemento y no lo va a comprobar, pero no va a haber un failure, pues al no ser ese primer valor el que queremos, va a devolver -1  como debería.
int arr[] = {2, 3, 5};
int y = 7;

5.
El primero de los estados erróneos es cuando llega al principio del array sin haberlo encontrado. Entonces la variable de control del bucle acabará valiendo 1, cuando debería valer 0, y el contador de programa debería estar apuntando dentro del bucle, y ya se ha salido.

6.
java -cp .:../junit-4.12.jar:../hamcrest-core-1.3.jar AllTests
.
Time: 0.009

OK (1 test)
Cambiando el > por un >=.
for (int i=x.length-1; i >= 0; i--)
